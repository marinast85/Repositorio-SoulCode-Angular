OBS: O QUE FOR TAREFA OU TAREFAS É LIVRO OU LIVROS
***projeto gerenciador de tarefas***
1)chegar na pasta do projeto pelo terminal (projetoAngularCalculadora)
> ng new gerenciador-de-tarefas

2)entrar na pasta gerenciador-de-tarefas:
> cd gerenciador-de-tarefas
> ng serve

3)Remover dois últimos blocos de app.component.spec.ts
4)em app.component.ts
title = 'Gerenciador de Tarefas';
5)limpar app.component.html
<div class="container-fluid">
  <nav class="navbar navbar-default">
    <div class="container-fluid">
      <div class="nav-header">
        <a href="" class="navbar-brand">
          {{ title }}
        </a>
      </div>
    </div>
  </nav>
</div>

6)novo terminal entrar na pasta que criamos dentro do projeto:
C:\Users\diana\Desktop\Angular_aulas\projetoAngularCalculadora\gerenciador-de-tarefas>npm install --save bootstrap@3

7)indicar o caminho do bootstrap em angular.json:
passar o caminho do bootstrap no style: 
"styles": [
              "src/styles.css",
              "node_modules/bootstrap/dist/css/bootstrap.min.css"
            ],
8)reiniciar o servidor:
>ng serve
9)Utilizar rotas para permitir a troca de componentes da página - existe um módulo exclusivo pra rotas
é necessário configurar as rotas no conteúdo principal

em src>app> criar um arquivo app-routing.module.ts: ou (ng g m [ModuleName] --routing)
e fazer importações:
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

export const router : Routes = [];

@NgModule({
    imports :[ RouterModule.forRoot(router)],
    exports :[ RouterModule]
})

export class AppRoutingModule {}


10)informar ao app.module.ts da criação desse novo módulo:
imports: [
    BrowserModule, 
    AppRoutingModule //aqui informamos os modulos criados
  ],

11)em app.component.html:
<!-- abaixo da barra de navegação  -->
  <router-outlet></router-outlet> 

12)criar novo módulo, o de tarefas:
> ng g module tarefas

13)criar index.ts dentro de tarefas:
export * from './tarefas.module'

14) em app.module.ts
imports: [
    BrowserModule, 
    AppRoutingModule, //aqui informamos os modulos criados
    TarefasModule
  ],

15)criar um local onde possa fazer a criação de tarefas:
criar model - moldar o nosso objeto
dentro da pasta tarefas criar pasta com o nome shared (aqui dentro ficaram os arquivos que queremos compartilhar)
então dentro dessa pasta vamos criar um arquivo chamado:
** tarefa.model.ts que recebe:

export class Tarefa{
    constructor(
        public id?:number,
        public nome?:string,
        public concluida?:boolean
    ) {

    }
}

ir em ts.config.json trocar a linha 8 para: "strict": false,

16) criar um index.ts dentro de shared:
export * from './tarefa.model';

17)dentro do index.ts incluir o caminho da pasta shared:
export * from './shared';

*nesse arquivo teremos então: 
export * from './tarefas.module';
export * from './shared';

18)criar um serviço com nome tarefa dentro de tarefas/shared
C:\Users\diana\Desktop\Angular_aulas\projetoAngularCalculadora\gerenciador-de-tarefas>ng g module tarefas (livros)

no index.ts da pasta shared:
export * from './tarefa.model';
export * from './tarefa.service';


19)precisamos informar ao tarefas.module.ts a existencia desse serviço criado(para estar disponível ao app.module)
providers:[
    TarefaService
  ]

O arquivo tarefas.module.ts devemos fica com a seguinte composição:
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TarefaService } from './shared';



@NgModule({
  declarations: [],
  imports: [
    CommonModule
  ],
  providers:[
    TarefaService
  ]
})
export class TarefasModule { }

20)Agora podemos implementar o serviço - onde ficará a parte lógica da aplicação (em **tarefa.service.ts**)
 precisaremos dos métodos que serão implementados por métodos:
- listar
- cadastrar
- buscar por id
- atualizar
- remover
- alterar status

excluímos: a seguinte parte do código para não fazer a injeção na raiz:
{
  providedIn: 'root'
}

21)Vamos iniciar a criação dos métodos, que funcionaram como uma função
1- método listarTodos: 
import { Injectable } from '@angular/core';
import { Tarefa } from './tarefa.model'

@Injectable()
export class TarefaService {

  constructor() { }

  listarTodos(): Tarefa[]{  //esse Tarefa vem do model

  }
}

atualizando a criação desse serviço:
import { Injectable } from '@angular/core';
import { Tarefa } from './tarefa.model'

@Injectable()
export class TarefaService {

  constructor() { }

  listarTodos(): Tarefa[]{ //vem de model
    const tarefas = localStorage['tarefas'] //vai receber do localStorage['nomedobanco']
    return tarefas ? JSON.parse(tarefas): []; //dentro da const tarefas recebe todas as tarefas, mas no primeiro momento não terá nenhuma tarefa, então dentro do return vamos fazer a verificação. JSON.parse converterá de string para json (localStorage armazena como string)
  }
}


2- método cadastrar
cadastrar(tarefa: Tarefa):void{  //passar o parametro do que quero cadastrar
    const tarefas = this.listarTodos();
    tarefa.id = new Date().getTime();  //usamos o método timestamp como id por ser um identificador único
    tarefas.push(tarefa);
    localStorage['tarefas'] = JSON.stringify(tarefas)
  }

arquivo deve ficar assim:
import { Injectable } from '@angular/core';
import { Tarefa } from './tarefa.model'

@Injectable()
export class TarefaService {

  constructor() { }

  listarTodos(): Tarefa[]{ //vem de model
    const tarefas = localStorage['tarefas'] 
    return tarefas ? JSON.parse(tarefas): []; 
  }

  cadastrar(tarefa: Tarefa):void{  
    const tarefas = this.listarTodos();
    tarefa.id = new Date().getTime();
    tarefas.push(tarefa);
    localStorage['tarefas'] = JSON.stringify(tarefas)
  }

  buscarPorId(id: number):Tarefa{
    const tarefas : Tarefa[] = this.listarTodos();
    return tarefas.find(tarefa => tarefa.id === id );
  }

  atualizar(tarefa: Tarefa): void{
    const tarefas : Tarefa[] = this.listarTodos();
    tarefas.forEach((obj, index, objs) =>{
      if( tarefa.id === obj.id){
        objs[index] = tarefa;
      }
    });
    localStorage['tarefas'] = JSON.stringify(tarefas); 
  }

  remover(id: number):void{
    let tarefas: Tarefa[] = this.listarTodos();
    tarefas = tarefas.filter(tarefas => tarefas.id !== id);
    localStorage['tarefas'] = JSON.stringify(tarefas);
  }

  alterarStatus(id: number):void{
    const tarefas : Tarefa[] = this.listarTodos();
    tarefas.forEach((obj, index, objs)=>{
      if(id === obj.id){
        objs[index].concluida = !obj.concluida;
      }
    });
    localStorage['tarefas'] = JSON.stringify(tarefas);
  }

}


20) Criar o component de listar-tarefas:
C:\Users\diana\Desktop\Angular_aulas\projetoAngularCalculadora\gerenciador-de-tarefas>ng g component tarefas/listar-tarefa
renomear a pasta criada para listar
21)criar barrels nessa pasta = index.ts:
export * from './listar-tarefa.component';

22)no index.ts da pasta shared incluir o export da pasta listar:
export * from '../listar';

23)Confirmar em tarefas.module.ts se ocorreu a importação de import { ListarTarefaComponent } from './listar';

declarations: [
    ListarTarefaComponent
  ],

24)Agora vamos precisar criar rota pra esse componente
dentro de tarefas criar o arquivo tarefas-routing.module.ts
import { Routes } from '@angular/router';
import { ListarTarefaComponent } from './listar';

export const TarefaRoutes: Routes = [
    { 
        path:'tarefas',
        redirectTo: 'tarefas/listar'
    }, 
    { 
        path:'tarefas/listar',
        component: ListarTarefaComponent
    }
];

25)em app-routing.module.ts incluir 

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { TarefaRoutes } from './tarefas';

export const router : Routes = [
    {
        path: '',
        redirectTo: 'tarefas/listar',
        pathMatch:'full'  //redireciona direto pra pasta raiz
    }, 
    ...TarefaRoutes  //faz um merge das rotas de tarefas-routing.module aqui
]; //dentro dos colchotes irão nossas rotas. faz concatenação de um array de rotas

@NgModule({
    imports : [ RouterModule.forRoot(router)],
    exports : [ 
        RouterModule
    ]
})

export class AppRoutingModule {} //informa sua existencia em app.module.ts

26)no listar-tarefa.component.html 
vai o html que queremos renderizar

27)em tarefas.module.ts:
importar 

 imports: [
    CommonModule,
    RouterModule,
    FormsModule
  ],

import { RouterModule } from '@angular/router';
import { FormsModule } from '@angular/forms';

28)em listar-tarefa.component.ts vamos chamar os métodos que criamos em serviços por data binding:
import { Component, OnInit } from '@angular/core';

import { TarefaService, Tarefa} from '../shared';


@Component({
  selector: 'app-listar-tarefa',
  templateUrl: './listar-tarefa.component.html',
  styleUrls: ['./listar-tarefa.component.css']
})
export class ListarTarefaComponent implements OnInit {

  tarefas: Tarefa[];  //vem do model

  constructor(private tarefaService : TarefaService) { }

  ngOnInit() {
    this.tarefas = this.listarTodos();
  }
  listarTodos(): Tarefa[]{
    return this.tarefaService.listarTodos();
  }

}

29)No listar-tarefa component.html 

<tr *ngFor="let tarefa of tarefas" [class.warning]="!tarefa.concluida">
            <td >
                {{ tarefa.nome}}
                <!-- [tarefaConcluida] ="tarefa.concluida" -->
            </td>

<p *ngIf="tarefas.length==0">Nenhuma tarefa cadastrada.</p>

----------------------------------------------------------------------------------------------------------------------------------
**Anotações Marina (projeto gerenciador de tarefas)
**pasta lista tem todos os componentes que listam 

30) dentro do prompot abrir a pasta e incluir pasta de cadastrar
C:\Users\mstol\OneDrive\Desktop\SoulCode\04-ANGULAR\06-gerenciador-de-tarefas>ng g component tarefas/cadastrar-tarefa

*renomear a pastar para apenas cadastrar
*no arquivo tarefas.model.ts (da pasta tarefas) confirmar se está como:
import { CadastrarTarefaComponent } from './cadastrar-tarefa/cadastrar-tarefa.component'; (linha 7)
*renomear a pasta cadstrar-tarefa para apenas "cadastrar"
import { CadastrarTarefaComponent } from './cadastrar/cadastrar-tarefa.component'; 

31) abrir index.ts dentro da pasta cadastrar e incluir
export * from './cadastrar-tarefa.component';

32)dentro do tarefas.module.ts confirmar se incluir 

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TarefaService } from './shared';
import { ListarTarefaComponent } from './listar';
import { RouterModule } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { CadastrarTarefaComponent } from './cadastrar/cadastrar-tarefa.component'; (confirmar se incluiu esse)

@NgModule({
  declarations: [
    ListarTarefaComponent,
    CadastrarTarefaComponent, (****confirmar se tem isso*****)
  
  ],
  imports: [
    CommonModule,
    RouterModule,
    FormsModule
  ],
  providers: [
    TarefaService
  ]
})
export class TarefasModule { }

33) no index.ts da raiz (pasta tarefas) incluir:
export * from './cadastrar';

34) em tarefas-routing.module.ts incluir
{
        path: 'tarefas/cadastrar',
        component: CadastrarTarefaComponent
    }    

*****vai ficar assim***
import { Routes } from "@angular/router";
import { CadastrarTarefaComponent } from "./cadastrar";
import { ListarTarefaComponent } from "./listar";

export const TarefaRoutes : Routes = [
    {
        path:'tarefas', 
        redirectTo: 'tarefas/listar'
    },
    {
        path:'tarefas/listar',
        component: ListarTarefaComponent
    }
    {
        path: 'tarefas/cadastrar',
        component: CadastrarTarefaComponent
    }    
]
35) HTML do lista no botão NOVO usar diretiva databiding
*****[routerLink]=['/tarefas/cadastrada']

<a class="btn btn-xs btn-success" [routerLink]="['/tarefas/cadastrar']">
    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> Novo
</a>

****o btão NOVO deve começar a funcionar

36) dentro de cadstrar-tarefa.component.html
<h1>Cadastrar tarefa</h1>

<div class="well">
  <form #formTarefa="ngForm">
    <div class="form-group">
      <label for="nome">Tarefa:</label>
      <input type="text" class="form-control" id="nome" name="nome" minlength="5" required> 
      <div class="alert alert-danger">
        <div>
          Digite a tarefa.
        </div>
        <div>
          A tarefa deve conter ao menos 5 caracteres.
        </div>
      </div>
    </div>
    <div class="form-group text-center">
      <input type="submit" class="btn btn-success">
      <a class="btn btn-default">
        <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span> Voltar
      </a>
    </div>
  </form>
</div>

37) dentro de cadastrar-tarefa.component.ts incluir

import { NgForm } from '@angular/forms';

38) dentro do mesmo arquivo cadastrar-tarefa.component.ts  incluir o @viewChild para ter uma referencia do HTML no meu componente
**incluir dentro do export

import { Component, OnInit, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';

@Component({
  selector: 'app-cadastrar-tarefa',
  templateUrl: './cadastrar-tarefa.component.html',
  styleUrls: ['./cadastrar-tarefa.component.css']
})
export class CadastrarTarefaComponent implements OnInit {
  @ViewChild('formTarefa', {static:true})formTarefa: NgForm; (*****incluir essa linha****)

  constructor() { }
  ngOnInit(): void {
  }
}

39) dentro do mesmo arquivo cadastrar-tarefa.component.ts  incluir:
import { TarefaService, Tarefa } from '../shared';

tarefa:Tarefa;
constructor(private tarefaService: TarefaService) { }

import { Router } from '@angular/router';
constructor(private tarefaService: TarefaService, private router: Router) { }

ngOnInit() {
    this.tarefa = new Tarefa();
  }

***vai ficar assim****

import { Component, OnInit, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';

import { TarefaService, Tarefa } from '../shared';
import { Router } from '@angular/router';

@Component({
  selector: 'app-cadastrar-tarefa',
  templateUrl: './cadastrar-tarefa.component.html',
  styleUrls: ['./cadastrar-tarefa.component.css']
})
export class CadastrarTarefaComponent implements OnInit {
  @ViewChild('formTarefa', {static:true})formTarefa: NgForm;
  tarefa:Tarefa

  constructor(private tarefaService: TarefaService, private router: Router) { }

  ngOnInit() {
    this.tarefa = new Tarefa();
  }
}

40) apagar as tarefas criadas NO ARQUIVO listar-tarefa.component.ts
ngOnInit(): void {
    this.tarefas = this.listarTodos();
    this.tarefas=[
      new Tarefa(1, "Tarefa 01", false), ****APAGA***
      new Tarefa(2, "Tarefa 02", true), ****APAGA***
      new Tarefa(3, "Tarefa 03", false) ****APAGA***
    ]
  }

41) no arquivo cadastrar-tarefa.ts incluir o componente de cadstro

 cadastrar(): void{
    if(this.formTarefa.form.valid){
      this.tarefaService.cadastrar(this.tarefa);
      this.router.navigate(['/tarefas']);
    }
  }
******arquivo vai ficar assim*****

import { Component, OnInit, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';

import { TarefaService, Tarefa } from '../shared';
import { Router } from '@angular/router';

@Component({
  selector: 'app-cadastrar-tarefa',
  templateUrl: './cadastrar-tarefa.component.html',
  styleUrls: ['./cadastrar-tarefa.component.css']
})
export class CadastrarTarefaComponent implements OnInit {
  @ViewChild('formTarefa', {static:true})formTarefa: NgForm;
  tarefa:Tarefa

  constructor(private tarefaService: TarefaService, private router: Router) { }

  ngOnInit() {
    this.tarefa = new Tarefa();
  }

  cadastrar(): void{
    if(this.formTarefa.form.valid){
      this.tarefaService.cadastrar(this.tarefa);
      this.router.navigate(['/tarefas']);
    }
  }
}

42) no arquivo cadastrar-tarefa.component.html no input incluir: 
[(ngModel)]= "tarefa.nome"   ***(input)
#nome="ngModel"   ****(input)
*ngIF="nome.errors"   ****(div de alerta)
[hidden]=!nome.erros.required   ****(div da mensagem de alerta para digitar uma tarefa)
 [hidden]="!nome.errors.minlength"  ****(div da mensagem que deve conter 5 caracteres)

****ARQUIVO VAI FICAR ASSIM****
<h1>Cadastrar tarefa</h1>

<div class="well">
  <form #formTarefa="ngForm">
    <div class="form-group">
      <label for="nome">Tarefa:</label>
      <input type="text" class="form-control" id="nome" name="nome" [(ngModel)]= "tarefa.nome" #nome="ngModel" minlength="5" required> 
      <div *ngIf="nome.errors && (nome.dirty || nome.touched)" class="alert alert-danger">
        <div [hidden]= "!nome.errors.required">
          Digite a tarefa.
        </div>
        <div [hidden]="!nome.errors.minlength">
          A tarefa deve conter ao menos 5 caracteres.
        </div>
      </div>
    </div>
    <div class="form-group text-center">
      <input type="submit" class="btn btn-success">
      <a class="btn btn-default">
        <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span> Voltar
      </a>
    </div>
  </form>
</div>

43)  no mesmo arquivo html incluir o evento click para cadastrar a tarefa digitada. Dentro do input da linha 18 para chamar o metodo cadastrar que eu criei dentro do meu cadastrar-tarefa.component.ts
(click)="cadastrar()" value="Cadastrar" [disabled]="!formTarefa.form.valid"
<input type="submit" class="btn btn-success" (click)="cadastrar()" value="Cadastrar" [disabled]="!formTarefa.form.valid">

44) botão voltar dentro do mesmo html incluir a rota para voltar na linha 19
 [routerLink]="['/tarefas']"
 <a class="btn btn-default" [routerLink]="['/tarefas']">
    <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span> Voltar
 </a>





